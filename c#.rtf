{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh18400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 \
<html>\
<head>\
<title>\
</title>\
</head>\
<body>\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 <h4>amstrong</h4>\
<p>\
using System;\
class ArmstrongNumbers\
\{\
    static void Main(string[] args)\
    \{\
        Console.WriteLine("Armstrong Number between 2 and 2000:");\
        for(int number=2;number<=2000;number++)\
        \{\
            if(IsArmstongNumber(number))\
            \{\
                Console.WriteLine(number);\
            \}\
        \}\
    \}\
    static bool IsArmstongNumber(int num)\
    \{\
        int OriginalNum=num;\
        int Sum=0;\
        int numDigits=CountDigits(num);\
        while(num>0)\
        \{\
            int digit=num%10;\
            Sum+=(int)Math.Pow(digit,numDigits);\
            num/=10;\
        \}\
        return Sum==OriginalNum;\
    \}\
    static int CountDigits(int num)\
    \{\
        int count=0;\
        while(num>0)\
        \{\
            num/=10;\
            count++;\
        \}\
        return count;\
    \}\
\}\
\
\
</p>\
\
<h4>complex</h4>\
<p>\
using System;\
class Complex\
\{\
    private double real;\
    private double img;\
\
    public Complex(double real,double img)\
    \{\
        this.real=real;\
        this.img=img;\
    \}\
    public static Complex operator +(Complex c1,Complex c2)\
    \{\
        double realsum=c1.real+c2.real;\
        double imgsum=c1.img+c2.img;\
        return new Complex(realsum,imgsum);\
    \}\
    public void Display()\
    \{\
        Console.WriteLine("Result = "+real+" + "+img+"i");\
    \}\
\}\
class Program\
\{\
    static void Main()\
    \{\
        Console.Write("enter the 1st real part: ");\
        double real1=double.Parse(Console.ReadLine());\
        Console.Write("enter the 1st imaginary part: ");\
        double img1=double.Parse(Console.ReadLine());\
        Console.Write("enter the 2nd real part: ");\
        double real2=double.Parse(Console.ReadLine());\
        Console.Write("enter the 2st imaginart part: ");\
        double img2=double.Parse(Console.ReadLine());\
\
        Complex cp1=new Complex(real1,img1);\
        Complex cp2=new Complex(real2,img2);\
        Complex res= cp1+cp2;\
        Console.WriteLine("\\n Sum of the two Complex number is: ");\
        res.Display();\
    \}\
\}\
</p>\
\
<h4> create erase</h4>\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 <p>\
using System;\
class Shape\{\
\
    public virtual void Draw()\
    \{\
        Console.WriteLine("Drawing a generic shape");\
    \}\
    public virtual void Erase()\
    \{\
        Console.WriteLine("Erasing a generic shape");\
    \}\
\}\
class Circle : Shape\
\{\
    public override void Draw()\
    \{\
        Console.WriteLine("Drawing a circle");\
    \}\
    public override void Erase()\
    \{\
        Console.WriteLine("Erasing a circle");\
    \}\
\}\
class Triangle : Shape\
\{\
    public override void Draw()\
    \{\
        Console.WriteLine("Drawing a Triangle");\
    \}\
    public override void Erase()\
    \{\
        Console.WriteLine("Erasing a Triangle");\
    \}\
\}\
class Square : Shape\
\{\
    public override void Draw()\
    \{\
        Console.WriteLine("Drawing a Square");\
    \}\
    public override void Erase()\
    \{\
        Console.WriteLine("Erasing a Square");\
    \}\
\}\
class Program\
\{\
    static void Main()\
    \{\
        Shape[] shapes=new Shape[]\
        \{\
            new Circle(),\
            new Triangle(),\
            new Square()\
        \};\
        Console.WriteLine("Demonstrating Polymorphism");\
        foreach(Shape shape in shapes)\
        \{\
            shape.Draw();\
            shape.Erase();\
        \}\
        \}\
    \}\
</p>\
<h4>devision by zero</h4>\
<p>\
using System;\
class Program\
\{\
    static void Main()\
    \{\
        //Division by Zero Exception\
        try\
        \{\
            int numerator=10;\
            int denominator=0;\
            int result=numerator/denominator;\
            Console.WriteLine("Result of division:"+result);\
        \}\
        catch(DivideByZeroException ex)\
        \{\
            Console.WriteLine("Division by Zero Exception:"+ex.Message);\
        \}\
        //Index Out of Range Exception\
        try\
        \{\
            int[] numbers=\{1,2,3,4,5\};\
            int index=10;\
            int value=numbers[index];\
            Console.WriteLine("Value at index"+index+":"+value);\
        \}\
        catch(IndexOutOfRangeException ex)\
        \{\
            Console.WriteLine("Index Out of Range Exception:"+ex.Message);\
        \}\
        Console.ReadLine();\
    \}\
\}\
        \
        \
    \
</p>\
<h4>floyds</h4>\
<p>\
using System;\
class FloydsTriangle \
\{\
    static void Main()\
    \{\
        Console.WriteLine("Enter the number of rows for Floyd's Triangle:");\
        int numRows =Convert.ToInt32(Console.ReadLine());\
        int[][] triangle = new int[numRows][];\
        int currentNumber = 1;\
        for (int i=0; i<numRows;i++)\
        \{\
            triangle[i] = new int[i+1];\
            for (int j=0; j<=i;j++)\
            \{\
                triangle[i][j] = currentNumber++;\
            \}\
        \}\
        Console.WriteLine("Floyd's Triangle:");\
         for (int i=0;i<numRows;i++)\
         \{\
            for (int j=0; j<=i;j++)\
            \{\
                Console.Write(triangle[i][j]);\
            \}\
            Console.WriteLine();\
         \}\
    \}\
\} \
</p>\
<h4>pascal triangle</h4>\
<p>\
using System;\
class PascalTriangle\
\{\
    static void Main()\
    \{\
        Console.WriteLine("Enter the number of rows for Pascal's Triangle:");\
        int numRows=Convert.ToInt32(Console.ReadLine());\
\
        int[][]pascalTriangle=GeneratePascalTriangle(numRows);\
\
        Console.WriteLine("Pascal's Triangle:");\
        PrintPascalTriangle(pascalTriangle);\
    \}\
    static int[][] GeneratePascalTriangle(int numRows)\
    \{\
        int[][] triangle=new int[numRows][];\
\
        for(int i=0;i<numRows;i++)\
        \{\
            triangle[i]=new int[i+1];\
            triangle[i][0]=1;\
\
            for(int j=1;j<i;j++)\
            \{\
                triangle[i][j]=triangle[i-1][j-1]+triangle[i-1][j];\
            \}\
\
            triangle[i][i]=1;\
        \}\
        return triangle;\
    \}\
    static void PrintPascalTriangle(int[][] triangle)\
    \{\
        int numRows=triangle.Length;\
\
        for(int i=0;i<numRows;i++)\
        \{\
            Console.Write(new string(' ',(numRows-i-1)*3));\
\
            for(int j=0;j<=i;j++)\
            \{\
                Console.Write(string.Format("\{0,-6\}",triangle[i][j]));\
            \}\
            Console.WriteLine();\
        \}\
    \}\
\}\
</p>\
\
\
<h4>push and pop</h4>\
<p>\
using System;\
class Stack\
\{\
 private int[] data;\
 private int top;\
 private int size;\
 public Stack(int size)\
 \{\
 this.size = size;\
 this.data = new int[size];\
 this.top = -1;\
 \}\
 public int Size\
 \{\
 get \{ return size; \}\
 \}\
 public void Push(int value)\
 \{\
 if (top == size - 1)\
 \{\
 Console.WriteLine("Stack overflow. Cannot push element \{0\}.", value);\
 \}\
 else\
 \{\
 top++;\
 data[top] = value;\
 Console.WriteLine("Pushed \{0\} onto the stack.", value);\
 \}\
 \}\
 public void Pop()\
\{\
 if (top == -1)\
 \{\
 Console.WriteLine("Stack underflow. Cannot pop from an empty stack.");\
 \}\
 else\
 \{\
 int poppedValue = data[top];\
 top--;\
 Console.WriteLine("Popped \{0\} from the stack.", poppedValue);\
 \}\
 \}\
\}\
class Program\
\{\
 static void Main()\
 \{\
 Stack myStack = new Stack(5);\
 myStack.Push(10);\
 myStack.Push(20);\
 myStack.Push(30);\
 myStack.Pop();\
 myStack.Pop();\
 myStack.Pop();\
 myStack.Pop();\
 Console.ReadLine();\
 \}\
\}\
\
</p>\
 \
<h4>read text</h4>\
<p>using System;\
using System.IO;\
class Program\
\{\
    static void Main()\
    \{\
        string sourceFilePath = "source.txt";\
        string destinationFilePath = "dest.txt";\
        Console.WriteLine("Contents of source file before copy:");\
        DisplayFileContents(sourceFilePath);\
        Console.WriteLine("Contents of destination file before copy:");\
        DisplayFileContents(destinationFilePath);\
        CopyFileContents(sourceFilePath, destinationFilePath);\
        Console.WriteLine("\\nContents of source file after copy:");\
        DisplayFileContents(sourceFilePath);\
        Console.WriteLine("\\nContents of destination file after copy:");\
        DisplayFileContents(destinationFilePath);\
    \}\
    static void CopyFileContents(string sourceFilePath, string destinationFilePath)\
    \{\
        try\
        \{\
          \
            string fileContents = File.ReadAllText(sourceFilePath);\
            \
            File.WriteAllText(destinationFilePath, fileContents);\
            Console.WriteLine("\\nFile copied successfully!");\
        \}\
        catch (Exception ex)\
        \{\
            Console.WriteLine($"Error while copying file: \{ex.Message\}");\
        \}\
    \}\
    static void DisplayFileContents(string filePath)\
    \{\
        try\
        \{\
            \
            string fileContents = File.ReadAllText(filePath);\
            Console.WriteLine($"File: \{filePath\}\\nContent:\\n\{fileContents\}");\
        \}\
        catch (FileNotFoundException)\
                \{\
            Console.WriteLine($"File '\{filePath\}' not found.");\
        \}\
        catch (Exception ex)\
        \{\
            Console.WriteLine($"Error while reading file: \{ex.Message\}");\
        \}\
    \}\
\}\
</p>\
<h4>resize height and width</h4>\
<p>\
using System;\
public interface Resizable\
\{\
    void resizeWidth(int width);\
    void resizeHeight(int height);\
\}\
public class Rectangle:Resizable\{\
    private int width;\
    private int height;\
    public Rectangle(int width,int height)\
    \{\
        this.width=width;\
        this.height=height;\
    \}\
    public void resizeWidth(int newWidth)\
    \{\
        if(newWidth>0)\
        \{\
            width=newWidth;\
            Console.WriteLine($"Width resized to:\{width\}");\
        \}\
        else\{\
            Console.WriteLine("Width must be greater than 0");\
        \}\
    \}\
    public void resizeHeight(int newHeight)\
    \{\
        if(newHeight>0)\
        \{\
            height=newHeight;\
            Console.WriteLine($"Height resized to:\{height\}");\
        \}\
        else\{\
            Console.WriteLine("Height must be greater than 0");\
        \}\
    \}\
    public void DisplayDimensions()\
    \{\
        Console.WriteLine($"Current Dimesions:Width=\{width\},Height=\{height\}");\
    \} \
\}\
class Program\{\
    static void Main()\
    \{\
        Rectangle myRectangle=new Rectangle(5,8);\
        Console.WriteLine("Initial Dimensions:");\
        myRectangle.DisplayDimensions();\
        myRectangle.resizeWidth(10);\
        myRectangle.resizeHeight(12);\
        Console.WriteLine("\\nDimensions after resizing:");\
        myRectangle.DisplayDimensions();\
    \}\
\}\
</p>\
<h4>simple calc</h4>\
<p>using System;\
    class Calculator\
    \{\
        public static void Main(String[] args)\
        \{\
            char op;\
            Console.WriteLine("Enter the first number:");\
            double num1=Convert.ToInt32(Console.ReadLine());\
            Console.WriteLine("Enter the second number:");\
            double num2=Convert.ToInt32(Console.ReadLine());\
            Console.WriteLine("Enter the operation(+,-,*,%,/)");\
            op=Convert.ToChar(Console.ReadLine());\
            double res=0;\
            switch(op)\
            \{\
                case '+':\
                res=num1+num2;\
                break;\
                case '-':\
                res=num1-num2;\
                break;\
                case '*':\
                res=num1*num2;\
                break;\
                case '%':\
                res=num1%num2;\
                break;\
                case '/':\
                res=num1/num2;\
                break;\
                default:\
                Console.WriteLine("Invalid operator");\
                break;\
            \}\
            Console.WriteLine("result is:\{0\}",res);\
            Console.ReadLine();\
\
        \}\
    \}\
</p>\
<h4>substring</h4>\
<p>\
using System;\
class substring\
\{\
    static void Main(String[] args)\
    \{\
        Console.Write("Enter a string:");\
        String inputstring=Console.ReadLine();\
        ListAllSubstrings(inputstring);\
        Console.ReadLine();\
    \}\
    static void ListAllSubstrings(String input)\
    \{\
        Console.WriteLine("All Substrings of the given String:");\
        for(int i=0;i<input.Length;i++)\
        \{\
            for(int j=i+1;j<=input.Length;j++)\
            \{\
                String substring=input.Substring(i,j-i);\
                Console.WriteLine(substring);\
            \}\
        \}\
    \}\
\}\
</p>\
\
\
</body>\
</html>\
}